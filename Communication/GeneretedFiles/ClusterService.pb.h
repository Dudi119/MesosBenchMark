// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClusterService.proto

#ifndef PROTOBUF_ClusterService_2eproto__INCLUDED
#define PROTOBUF_ClusterService_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ClusterService {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ClusterService_2eproto();
void protobuf_AssignDesc_ClusterService_2eproto();
void protobuf_ShutdownFile_ClusterService_2eproto();

class Empty;
class Param;
class Params;

enum Param_ValueType {
  Param_ValueType_Primitive = 0,
  Param_ValueType_StringCollection = 1,
  Param_ValueType_Param_ValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Param_ValueType_Param_ValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Param_ValueType_IsValid(int value);
const Param_ValueType Param_ValueType_ValueType_MIN = Param_ValueType_Primitive;
const Param_ValueType Param_ValueType_ValueType_MAX = Param_ValueType_StringCollection;
const int Param_ValueType_ValueType_ARRAYSIZE = Param_ValueType_ValueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Param_ValueType_descriptor();
inline const ::std::string& Param_ValueType_Name(Param_ValueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Param_ValueType_descriptor(), value);
}
inline bool Param_ValueType_Parse(
    const ::std::string& name, Param_ValueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Param_ValueType>(
    Param_ValueType_descriptor(), name, value);
}
enum AlgoType {
  Measurment = 0,
  AlgoType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AlgoType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AlgoType_IsValid(int value);
const AlgoType AlgoType_MIN = Measurment;
const AlgoType AlgoType_MAX = Measurment;
const int AlgoType_ARRAYSIZE = AlgoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AlgoType_descriptor();
inline const ::std::string& AlgoType_Name(AlgoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AlgoType_descriptor(), value);
}
inline bool AlgoType_Parse(
    const ::std::string& name, AlgoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AlgoType>(
    AlgoType_descriptor(), name, value);
}
// ===================================================================

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClusterService.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  void Swap(Empty* other);

  // implements Message ----------------------------------------------

  inline Empty* New() const { return New(NULL); }

  Empty* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ClusterService.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ClusterService_2eproto();
  friend void protobuf_AssignDesc_ClusterService_2eproto();
  friend void protobuf_ShutdownFile_ClusterService_2eproto();

  void InitAsDefaultInstance();
  static Empty* default_instance_;
};
// -------------------------------------------------------------------

class Param : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClusterService.Param) */ {
 public:
  Param();
  virtual ~Param();

  Param(const Param& from);

  inline Param& operator=(const Param& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Param& default_instance();

  enum ValueOneOfCase {
    kValueInt = 1,
    kValueLong = 2,
    kValueFloat = 3,
    kValueDouble = 4,
    kValueBool = 5,
    kValueString = 6,
    VALUEONEOF_NOT_SET = 0,
  };

  void Swap(Param* other);

  // implements Message ----------------------------------------------

  inline Param* New() const { return New(NULL); }

  Param* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Param& from);
  void MergeFrom(const Param& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Param* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Param_ValueType ValueType;
  static const ValueType Primitive =
    Param_ValueType_Primitive;
  static const ValueType StringCollection =
    Param_ValueType_StringCollection;
  static inline bool ValueType_IsValid(int value) {
    return Param_ValueType_IsValid(value);
  }
  static const ValueType ValueType_MIN =
    Param_ValueType_ValueType_MIN;
  static const ValueType ValueType_MAX =
    Param_ValueType_ValueType_MAX;
  static const int ValueType_ARRAYSIZE =
    Param_ValueType_ValueType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ValueType_descriptor() {
    return Param_ValueType_descriptor();
  }
  static inline const ::std::string& ValueType_Name(ValueType value) {
    return Param_ValueType_Name(value);
  }
  static inline bool ValueType_Parse(const ::std::string& name,
      ValueType* value) {
    return Param_ValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 valueInt = 1;
  private:
  bool has_valueint() const;
  public:
  void clear_valueint();
  static const int kValueIntFieldNumber = 1;
  ::google::protobuf::int32 valueint() const;
  void set_valueint(::google::protobuf::int32 value);

  // optional int64 valueLong = 2;
  private:
  bool has_valuelong() const;
  public:
  void clear_valuelong();
  static const int kValueLongFieldNumber = 2;
  ::google::protobuf::int64 valuelong() const;
  void set_valuelong(::google::protobuf::int64 value);

  // optional float valueFloat = 3;
  private:
  bool has_valuefloat() const;
  public:
  void clear_valuefloat();
  static const int kValueFloatFieldNumber = 3;
  float valuefloat() const;
  void set_valuefloat(float value);

  // optional double valueDouble = 4;
  private:
  bool has_valuedouble() const;
  public:
  void clear_valuedouble();
  static const int kValueDoubleFieldNumber = 4;
  double valuedouble() const;
  void set_valuedouble(double value);

  // optional bool valueBool = 5;
  private:
  bool has_valuebool() const;
  public:
  void clear_valuebool();
  static const int kValueBoolFieldNumber = 5;
  bool valuebool() const;
  void set_valuebool(bool value);

  // optional string valueString = 6;
  private:
  bool has_valuestring() const;
  public:
  void clear_valuestring();
  static const int kValueStringFieldNumber = 6;
  const ::std::string& valuestring() const;
  void set_valuestring(const ::std::string& value);
  void set_valuestring(const char* value);
  void set_valuestring(const char* value, size_t size);
  ::std::string* mutable_valuestring();
  ::std::string* release_valuestring();
  void set_allocated_valuestring(::std::string* valuestring);

  // optional .ClusterService.Param.ValueType type = 7;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::ClusterService::Param_ValueType type() const;
  void set_type(::ClusterService::Param_ValueType value);

  // optional string name = 8;
  void clear_name();
  static const int kNameFieldNumber = 8;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated string valueStringCollection = 9;
  int valuestringcollection_size() const;
  void clear_valuestringcollection();
  static const int kValueStringCollectionFieldNumber = 9;
  const ::std::string& valuestringcollection(int index) const;
  ::std::string* mutable_valuestringcollection(int index);
  void set_valuestringcollection(int index, const ::std::string& value);
  void set_valuestringcollection(int index, const char* value);
  void set_valuestringcollection(int index, const char* value, size_t size);
  ::std::string* add_valuestringcollection();
  void add_valuestringcollection(const ::std::string& value);
  void add_valuestringcollection(const char* value);
  void add_valuestringcollection(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& valuestringcollection() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_valuestringcollection();

  ValueOneOfCase valueOneOf_case() const;
  // @@protoc_insertion_point(class_scope:ClusterService.Param)
 private:
  inline void set_has_valueint();
  inline void set_has_valuelong();
  inline void set_has_valuefloat();
  inline void set_has_valuedouble();
  inline void set_has_valuebool();
  inline void set_has_valuestring();

  inline bool has_valueOneOf() const;
  void clear_valueOneOf();
  inline void clear_has_valueOneOf();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> valuestringcollection_;
  int type_;
  union ValueOneOfUnion {
    ValueOneOfUnion() {}
    ::google::protobuf::int32 valueint_;
    ::google::protobuf::int64 valuelong_;
    float valuefloat_;
    double valuedouble_;
    bool valuebool_;
    ::google::protobuf::internal::ArenaStringPtr valuestring_;
  } valueOneOf_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_ClusterService_2eproto();
  friend void protobuf_AssignDesc_ClusterService_2eproto();
  friend void protobuf_ShutdownFile_ClusterService_2eproto();

  void InitAsDefaultInstance();
  static Param* default_instance_;
};
// -------------------------------------------------------------------

class Params : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClusterService.Params) */ {
 public:
  Params();
  virtual ~Params();

  Params(const Params& from);

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Params& default_instance();

  void Swap(Params* other);

  // implements Message ----------------------------------------------

  inline Params* New() const { return New(NULL); }

  Params* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Params& from);
  void MergeFrom(const Params& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Params* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ClusterService.AlgoType algoType = 1;
  void clear_algotype();
  static const int kAlgoTypeFieldNumber = 1;
  ::ClusterService::AlgoType algotype() const;
  void set_algotype(::ClusterService::AlgoType value);

  // repeated .ClusterService.Param genericParams = 2;
  int genericparams_size() const;
  void clear_genericparams();
  static const int kGenericParamsFieldNumber = 2;
  const ::ClusterService::Param& genericparams(int index) const;
  ::ClusterService::Param* mutable_genericparams(int index);
  ::ClusterService::Param* add_genericparams();
  ::google::protobuf::RepeatedPtrField< ::ClusterService::Param >*
      mutable_genericparams();
  const ::google::protobuf::RepeatedPtrField< ::ClusterService::Param >&
      genericparams() const;

  // @@protoc_insertion_point(class_scope:ClusterService.Params)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ClusterService::Param > genericparams_;
  int algotype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ClusterService_2eproto();
  friend void protobuf_AssignDesc_ClusterService_2eproto();
  friend void protobuf_ShutdownFile_ClusterService_2eproto();

  void InitAsDefaultInstance();
  static Params* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

// -------------------------------------------------------------------

// Param

// optional int32 valueInt = 1;
inline bool Param::has_valueint() const {
  return valueOneOf_case() == kValueInt;
}
inline void Param::set_has_valueint() {
  _oneof_case_[0] = kValueInt;
}
inline void Param::clear_valueint() {
  if (has_valueint()) {
    valueOneOf_.valueint_ = 0;
    clear_has_valueOneOf();
  }
}
inline ::google::protobuf::int32 Param::valueint() const {
  // @@protoc_insertion_point(field_get:ClusterService.Param.valueInt)
  if (has_valueint()) {
    return valueOneOf_.valueint_;
  }
  return 0;
}
inline void Param::set_valueint(::google::protobuf::int32 value) {
  if (!has_valueint()) {
    clear_valueOneOf();
    set_has_valueint();
  }
  valueOneOf_.valueint_ = value;
  // @@protoc_insertion_point(field_set:ClusterService.Param.valueInt)
}

// optional int64 valueLong = 2;
inline bool Param::has_valuelong() const {
  return valueOneOf_case() == kValueLong;
}
inline void Param::set_has_valuelong() {
  _oneof_case_[0] = kValueLong;
}
inline void Param::clear_valuelong() {
  if (has_valuelong()) {
    valueOneOf_.valuelong_ = GOOGLE_LONGLONG(0);
    clear_has_valueOneOf();
  }
}
inline ::google::protobuf::int64 Param::valuelong() const {
  // @@protoc_insertion_point(field_get:ClusterService.Param.valueLong)
  if (has_valuelong()) {
    return valueOneOf_.valuelong_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Param::set_valuelong(::google::protobuf::int64 value) {
  if (!has_valuelong()) {
    clear_valueOneOf();
    set_has_valuelong();
  }
  valueOneOf_.valuelong_ = value;
  // @@protoc_insertion_point(field_set:ClusterService.Param.valueLong)
}

// optional float valueFloat = 3;
inline bool Param::has_valuefloat() const {
  return valueOneOf_case() == kValueFloat;
}
inline void Param::set_has_valuefloat() {
  _oneof_case_[0] = kValueFloat;
}
inline void Param::clear_valuefloat() {
  if (has_valuefloat()) {
    valueOneOf_.valuefloat_ = 0;
    clear_has_valueOneOf();
  }
}
inline float Param::valuefloat() const {
  // @@protoc_insertion_point(field_get:ClusterService.Param.valueFloat)
  if (has_valuefloat()) {
    return valueOneOf_.valuefloat_;
  }
  return 0;
}
inline void Param::set_valuefloat(float value) {
  if (!has_valuefloat()) {
    clear_valueOneOf();
    set_has_valuefloat();
  }
  valueOneOf_.valuefloat_ = value;
  // @@protoc_insertion_point(field_set:ClusterService.Param.valueFloat)
}

// optional double valueDouble = 4;
inline bool Param::has_valuedouble() const {
  return valueOneOf_case() == kValueDouble;
}
inline void Param::set_has_valuedouble() {
  _oneof_case_[0] = kValueDouble;
}
inline void Param::clear_valuedouble() {
  if (has_valuedouble()) {
    valueOneOf_.valuedouble_ = 0;
    clear_has_valueOneOf();
  }
}
inline double Param::valuedouble() const {
  // @@protoc_insertion_point(field_get:ClusterService.Param.valueDouble)
  if (has_valuedouble()) {
    return valueOneOf_.valuedouble_;
  }
  return 0;
}
inline void Param::set_valuedouble(double value) {
  if (!has_valuedouble()) {
    clear_valueOneOf();
    set_has_valuedouble();
  }
  valueOneOf_.valuedouble_ = value;
  // @@protoc_insertion_point(field_set:ClusterService.Param.valueDouble)
}

// optional bool valueBool = 5;
inline bool Param::has_valuebool() const {
  return valueOneOf_case() == kValueBool;
}
inline void Param::set_has_valuebool() {
  _oneof_case_[0] = kValueBool;
}
inline void Param::clear_valuebool() {
  if (has_valuebool()) {
    valueOneOf_.valuebool_ = false;
    clear_has_valueOneOf();
  }
}
inline bool Param::valuebool() const {
  // @@protoc_insertion_point(field_get:ClusterService.Param.valueBool)
  if (has_valuebool()) {
    return valueOneOf_.valuebool_;
  }
  return false;
}
inline void Param::set_valuebool(bool value) {
  if (!has_valuebool()) {
    clear_valueOneOf();
    set_has_valuebool();
  }
  valueOneOf_.valuebool_ = value;
  // @@protoc_insertion_point(field_set:ClusterService.Param.valueBool)
}

// optional string valueString = 6;
inline bool Param::has_valuestring() const {
  return valueOneOf_case() == kValueString;
}
inline void Param::set_has_valuestring() {
  _oneof_case_[0] = kValueString;
}
inline void Param::clear_valuestring() {
  if (has_valuestring()) {
    valueOneOf_.valuestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_valueOneOf();
  }
}
inline const ::std::string& Param::valuestring() const {
  // @@protoc_insertion_point(field_get:ClusterService.Param.valueString)
  if (has_valuestring()) {
    return valueOneOf_.valuestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Param::set_valuestring(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ClusterService.Param.valueString)
  if (!has_valuestring()) {
    clear_valueOneOf();
    set_has_valuestring();
    valueOneOf_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  valueOneOf_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClusterService.Param.valueString)
}
inline void Param::set_valuestring(const char* value) {
  if (!has_valuestring()) {
    clear_valueOneOf();
    set_has_valuestring();
    valueOneOf_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  valueOneOf_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClusterService.Param.valueString)
}
inline void Param::set_valuestring(const char* value, size_t size) {
  if (!has_valuestring()) {
    clear_valueOneOf();
    set_has_valuestring();
    valueOneOf_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  valueOneOf_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClusterService.Param.valueString)
}
inline ::std::string* Param::mutable_valuestring() {
  if (!has_valuestring()) {
    clear_valueOneOf();
    set_has_valuestring();
    valueOneOf_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:ClusterService.Param.valueString)
  return valueOneOf_.valuestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Param::release_valuestring() {
  // @@protoc_insertion_point(field_release:ClusterService.Param.valueString)
  if (has_valuestring()) {
    clear_has_valueOneOf();
    return valueOneOf_.valuestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Param::set_allocated_valuestring(::std::string* valuestring) {
  if (!has_valuestring()) {
    valueOneOf_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_valueOneOf();
  if (valuestring != NULL) {
    set_has_valuestring();
    valueOneOf_.valuestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        valuestring);
  }
  // @@protoc_insertion_point(field_set_allocated:ClusterService.Param.valueString)
}

// optional .ClusterService.Param.ValueType type = 7;
inline void Param::clear_type() {
  type_ = 0;
}
inline ::ClusterService::Param_ValueType Param::type() const {
  // @@protoc_insertion_point(field_get:ClusterService.Param.type)
  return static_cast< ::ClusterService::Param_ValueType >(type_);
}
inline void Param::set_type(::ClusterService::Param_ValueType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ClusterService.Param.type)
}

// optional string name = 8;
inline void Param::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Param::name() const {
  // @@protoc_insertion_point(field_get:ClusterService.Param.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Param::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ClusterService.Param.name)
}
inline void Param::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ClusterService.Param.name)
}
inline void Param::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ClusterService.Param.name)
}
inline ::std::string* Param::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ClusterService.Param.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Param::release_name() {
  // @@protoc_insertion_point(field_release:ClusterService.Param.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Param::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ClusterService.Param.name)
}

// repeated string valueStringCollection = 9;
inline int Param::valuestringcollection_size() const {
  return valuestringcollection_.size();
}
inline void Param::clear_valuestringcollection() {
  valuestringcollection_.Clear();
}
inline const ::std::string& Param::valuestringcollection(int index) const {
  // @@protoc_insertion_point(field_get:ClusterService.Param.valueStringCollection)
  return valuestringcollection_.Get(index);
}
inline ::std::string* Param::mutable_valuestringcollection(int index) {
  // @@protoc_insertion_point(field_mutable:ClusterService.Param.valueStringCollection)
  return valuestringcollection_.Mutable(index);
}
inline void Param::set_valuestringcollection(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ClusterService.Param.valueStringCollection)
  valuestringcollection_.Mutable(index)->assign(value);
}
inline void Param::set_valuestringcollection(int index, const char* value) {
  valuestringcollection_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ClusterService.Param.valueStringCollection)
}
inline void Param::set_valuestringcollection(int index, const char* value, size_t size) {
  valuestringcollection_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClusterService.Param.valueStringCollection)
}
inline ::std::string* Param::add_valuestringcollection() {
  // @@protoc_insertion_point(field_add_mutable:ClusterService.Param.valueStringCollection)
  return valuestringcollection_.Add();
}
inline void Param::add_valuestringcollection(const ::std::string& value) {
  valuestringcollection_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ClusterService.Param.valueStringCollection)
}
inline void Param::add_valuestringcollection(const char* value) {
  valuestringcollection_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ClusterService.Param.valueStringCollection)
}
inline void Param::add_valuestringcollection(const char* value, size_t size) {
  valuestringcollection_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ClusterService.Param.valueStringCollection)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Param::valuestringcollection() const {
  // @@protoc_insertion_point(field_list:ClusterService.Param.valueStringCollection)
  return valuestringcollection_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Param::mutable_valuestringcollection() {
  // @@protoc_insertion_point(field_mutable_list:ClusterService.Param.valueStringCollection)
  return &valuestringcollection_;
}

inline bool Param::has_valueOneOf() const {
  return valueOneOf_case() != VALUEONEOF_NOT_SET;
}
inline void Param::clear_has_valueOneOf() {
  _oneof_case_[0] = VALUEONEOF_NOT_SET;
}
inline Param::ValueOneOfCase Param::valueOneOf_case() const {
  return Param::ValueOneOfCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Params

// optional .ClusterService.AlgoType algoType = 1;
inline void Params::clear_algotype() {
  algotype_ = 0;
}
inline ::ClusterService::AlgoType Params::algotype() const {
  // @@protoc_insertion_point(field_get:ClusterService.Params.algoType)
  return static_cast< ::ClusterService::AlgoType >(algotype_);
}
inline void Params::set_algotype(::ClusterService::AlgoType value) {
  
  algotype_ = value;
  // @@protoc_insertion_point(field_set:ClusterService.Params.algoType)
}

// repeated .ClusterService.Param genericParams = 2;
inline int Params::genericparams_size() const {
  return genericparams_.size();
}
inline void Params::clear_genericparams() {
  genericparams_.Clear();
}
inline const ::ClusterService::Param& Params::genericparams(int index) const {
  // @@protoc_insertion_point(field_get:ClusterService.Params.genericParams)
  return genericparams_.Get(index);
}
inline ::ClusterService::Param* Params::mutable_genericparams(int index) {
  // @@protoc_insertion_point(field_mutable:ClusterService.Params.genericParams)
  return genericparams_.Mutable(index);
}
inline ::ClusterService::Param* Params::add_genericparams() {
  // @@protoc_insertion_point(field_add:ClusterService.Params.genericParams)
  return genericparams_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ClusterService::Param >*
Params::mutable_genericparams() {
  // @@protoc_insertion_point(field_mutable_list:ClusterService.Params.genericParams)
  return &genericparams_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ClusterService::Param >&
Params::genericparams() const {
  // @@protoc_insertion_point(field_list:ClusterService.Params.genericParams)
  return genericparams_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ClusterService

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ClusterService::Param_ValueType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClusterService::Param_ValueType>() {
  return ::ClusterService::Param_ValueType_descriptor();
}
template <> struct is_proto_enum< ::ClusterService::AlgoType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClusterService::AlgoType>() {
  return ::ClusterService::AlgoType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClusterService_2eproto__INCLUDED
