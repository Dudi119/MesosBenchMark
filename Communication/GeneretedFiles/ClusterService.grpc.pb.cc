// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: ClusterService.proto

#include "ClusterService.pb.h"
#include "ClusterService.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace ClusterService {

static const char* Commands_method_names[] = {
  "/ClusterService.Commands/Init",
  "/ClusterService.Commands/SubmitTask",
  "/ClusterService.Commands/Terminate",
};

std::unique_ptr< Commands::Stub> Commands::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Commands::Stub> stub(new Commands::Stub(channel));
  return stub;
}

Commands::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Init_(Commands_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitTask_(Commands_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Terminate_(Commands_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Commands::Stub::Init(::grpc::ClientContext* context, const ::ClusterService::Params& request, ::ClusterService::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Init_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ClusterService::Empty>* Commands::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::ClusterService::Params& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::ClusterService::Empty>(channel_.get(), cq, rpcmethod_Init_, context, request);
}

::grpc::Status Commands::Stub::SubmitTask(::grpc::ClientContext* context, const ::ClusterService::Empty& request, ::ClusterService::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SubmitTask_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ClusterService::Empty>* Commands::Stub::AsyncSubmitTaskRaw(::grpc::ClientContext* context, const ::ClusterService::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::ClusterService::Empty>(channel_.get(), cq, rpcmethod_SubmitTask_, context, request);
}

::grpc::Status Commands::Stub::Terminate(::grpc::ClientContext* context, const ::ClusterService::Empty& request, ::ClusterService::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Terminate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ClusterService::Empty>* Commands::Stub::AsyncTerminateRaw(::grpc::ClientContext* context, const ::ClusterService::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::ClusterService::Empty>(channel_.get(), cq, rpcmethod_Terminate_, context, request);
}

Commands::Service::Service() {
  (void)Commands_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Commands_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Commands::Service, ::ClusterService::Params, ::ClusterService::Empty>(
          std::mem_fn(&Commands::Service::Init), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Commands_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Commands::Service, ::ClusterService::Empty, ::ClusterService::Empty>(
          std::mem_fn(&Commands::Service::SubmitTask), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Commands_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Commands::Service, ::ClusterService::Empty, ::ClusterService::Empty>(
          std::mem_fn(&Commands::Service::Terminate), this)));
}

Commands::Service::~Service() {
}

::grpc::Status Commands::Service::Init(::grpc::ServerContext* context, const ::ClusterService::Params* request, ::ClusterService::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Commands::Service::SubmitTask(::grpc::ServerContext* context, const ::ClusterService::Empty* request, ::ClusterService::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Commands::Service::Terminate(::grpc::ServerContext* context, const ::ClusterService::Empty* request, ::ClusterService::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ClusterService

